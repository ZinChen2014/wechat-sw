package com.desksoft.wechat.controller.microMsg;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.desksoft.wechat.common.model.UserBindFlow;
import com.desksoft.wechat.common.model.otherbean.MyWaterInfo;
import com.desksoft.wechat.controller.admin.BaseController;
import com.desksoft.wechat.service.YouPuSocketService;
import com.jfinal.kit.StrKit;


/**
 * 我的用水 缴费 预存
 * @author Joker
 *
 */
public class MyUserWaterController extends BaseController {
	
//TODO 需要接口
	/**
	 * 加载我的用水列表
	 */
	public void getUsedWaterList(){
		String openId = getPara("openId",null);
		if(StringUtils.isNotBlank(openId)){
		//	setAttr("openID", openId);
			List<Map<String,Object>> rlist = new ArrayList<Map<String,Object>>();
			List<UserBindFlow> list = UserBindFlow.me.selectBindingUserList(openId);
			for(UserBindFlow userBindFlow:list){
				 //调用 水务接口，根据openID，找到绑定的所有户号，每个户号去调用接口
				String userNo = userBindFlow.getUserNo().toString().trim();
				if(userBindFlow!=null&&StrKit.notBlank(userNo)){
					String backString = YouPuSocketService.getUserWaterInfo(userNo,null,null);
					//响应码
					String code =YouPuSocketService.isSuccessConnect(backString);
					if("00".equals(code)){
						List<?> dataList = YouPuSocketService.getBackList(backString);
						Map<String,Object> map = new HashMap<String,Object>();
						map.put("userNo", userNo);
						map.put("rePay", dataList.get(2));
						map.put("cardID", dataList.get(4));
						map.put("userName", dataList.get(5));
						map.put("address", dataList.get(6));
						int tableN = (int)dataList.get(3) ;
						int dataN = (int)dataList.get(7) ;
						int add = dataN*8+4+4;
						//TODO 预存款 还没有呢
						int d =1;
						for(int j=4;j<dataList.size();j+=add){
							if(d>tableN){
								break;
							}
							dataN =  (int)dataList.get(add+3);
							List<MyWaterInfo> list2 = new ArrayList<MyWaterInfo>();
							int k=1;
							for(int i=add+4;i<dataList.size();i+=8){
								if(k>dataN){
									break;
								}
								MyWaterInfo myWaterInfo = new MyWaterInfo();
								myWaterInfo.setYearMonth(dataList.get(i).toString());
								myWaterInfo.setAgoAmount(dataList.get(i+1).toString());
								myWaterInfo.setCurrentAmount(dataList.get(i+2).toString());
								myWaterInfo.setAmount(dataList.get(i+3).toString());
								myWaterInfo.setMustAmount(dataList.get(i+4).toString());
								myWaterInfo.setFee(dataList.get(i+5).toString());
								myWaterInfo.setWxFee(dataList.get(i+6).toString());
								myWaterInfo.setFlag(dataList.get(i+7).toString());
								list2.add(myWaterInfo);
								k++;
							}
						map.put("waterList", list2);
						d++;
						}
						rlist.add(map);	
					}else{
						renderText("系统获取数据失败");
					}
				}else{
					renderText("你绑定的户号已经无效");
				}
			
			}
			
			if(list.size()>0){
				setAttr("objList", rlist);
				render("myUsedWater.html");
			}else{
				render("addUser.html");
			}
				
		}else{
			renderText("非法URL");
		}
		
	}
	
	/**
	 * 缴费 openId查询该用户对应的户号List，依次预存查看
	 */
	public void payWater(){
		String openId = getPara("openId",null);
		if(StringUtils.isNotBlank(openId)){
			//setAttr("openID", openId);
			List<Map<String,Object>> rlist = new ArrayList<Map<String,Object>>();
			List<UserBindFlow> list = UserBindFlow.me.selectBindingUserList(openId);
			for(UserBindFlow userBindFlow:list){
				 // 调用 水务接口，根据openID，找到绑定的所有户号，每个户号去调用接口,返回每个用户的欠费情况
				//假设调用接口，返回用水信息wtMap和一个状态值status:1不欠费，0欠费，欠费就有一个wtMap
				String userNo = userBindFlow.getUserNo().toString().trim();
				Map<String,Object> map = new HashMap<String,Object>();
				
				if(userBindFlow!=null&&StrKit.notBlank(userNo)){
					map.put("userBindFlow", userBindFlow);
					
					
					String backString = YouPuSocketService.getpayData(userNo, null, null);
					//响应码
					String code =YouPuSocketService.isSuccessConnect(backString);
					List dataList = YouPuSocketService.getBackList(backString);
					if("00".equals(code)){
						//绑定人信息
						if(StrKit.isBlank(userBindFlow.getUserName())){
							userBindFlow.setUserName(dataList.get(1).toString());
						}
						if(StrKit.isBlank(userBindFlow.getAddress())){
							userBindFlow.setAddress(dataList.get(2).toString());
						}
						//其他信息
						String num = (String) dataList.get(3);//一共多少笔交易
						double    waterFee = 0;
						double    fund = 0;
						double    total;
						for(int i=4;i<dataList.size();i+=4){
							waterFee = add(waterFee,Double.parseDouble((String) dataList.get(i+2)));
							fund = add(fund,Double.parseDouble((String) dataList.get(i+3)));
						}
						total = add(waterFee,fund);
						Map<String,Object> wtMap = new HashMap<String,Object>();
						wtMap.put("num", num);//笔数
						wtMap.put("waterFee", waterFee);//水费
						wtMap.put("fund", fund);//违约金
						wtMap.put("total", total);//总金额
						map.put("wtMap", wtMap);
						if(Integer.valueOf(num)>0){
							map.put("status", 0);
						}else{
							map.put("status", 1);
						}
						
					}else if("11".equals(code)){
						//绑定人信息
						if(StrKit.isBlank(userBindFlow.getUserName())){
							userBindFlow.setUserName(dataList.get(1).toString());
						}
						if(StrKit.isBlank(userBindFlow.getAddress())){
							userBindFlow.setAddress(dataList.get(2).toString());
						}
						map.put("status", 1);
					}else{
						map.put("status", -1);//查询失败
					}
				}	
				//该用户用水信息
				rlist.add(map);
			}
			
			if(list.size()>0){
				setAttr("objList", rlist);
				render("payWater.html");
			}else{
				render("addUser.html");
			}
				
		}else{
			renderText("非法URL");
		}
		
	}
	
    public static double add(double v1, String v2) {  
        BigDecimal b1 = new BigDecimal(Double.toString(v1));  
        BigDecimal b2 = new BigDecimal(v2);  
        return b1.add(b2).doubleValue();  
    }
    public static double add(double v1, double v2) {  
        BigDecimal b1 = new BigDecimal(Double.toString(v1));  
        BigDecimal b2 = new BigDecimal(Double.toString(v2));  
        return b1.add(b2).doubleValue();  
    } 
	
	/**
	 * 水费预存 openId查询该用户对应的户号List，依次预存查看
	 */
	public void rePayWater(){
		String openId = getPara("openId",null);
		if(StringUtils.isNotBlank(openId)){
			List<UserBindFlow> list = UserBindFlow.me.selectBindingUserList(openId);
			int i=0;
			for(UserBindFlow userBindFlow:list){
				 //TODO 调用 水务接口，根据openID，找到绑定的所有户号，每个户号去调用接口,返回每个用户的预存信息
				 //TODO 把预存金额，存入本地预存费用
				//Integer userNo = userBindFlow.getUserNo();
				//假设调用接口，返回用水信息预存款 失败给remark赋值
				if(i==0){
					long rePayFee = 88;
					//该用户用水信息预存款
					userBindFlow.setRePayFee(rePayFee);
					userBindFlow.setRemark("1");
				}else{
					userBindFlow.setRemark("0");
				}
				
				i++;
			}
			
			if(list.size()>0){
				setAttr("objList", list);
				render("rePayWater.html");
			}else{
				render("addUser.html");
			}
				
		}else{
			renderText("非法URL");
		}
	}
	
}
