package com.desksoft.wechat.common.model;

import java.util.HashMap;
import java.util.Map;

import com.desksoft.wechat.common.model.base.BaseUser;
import com.desksoft.wechat.utils.PasswordUtil;

@SuppressWarnings("serial")
public class User extends BaseUser<User> {
	
	public static final User dao = new User();
	
	public static final int IS_DELETE_NO = 0;
	public static final int IS_DELETE_YES = 1;
	
	
	/**
	 * 所有 sql 与业务逻辑写在 Model 或 Service 中，不要写在 Controller 中，养成好习惯，有利于大型项目的开发与维护
	 */
/*	public Page<User> paginate(int pageNumber, int pageSize) {
		return paginate(pageNumber, pageSize, "select *", "from user order by id asc");
	}*/
	
	public Map<String, Object> checkLoginByUser(User user){
		Map<String, Object> map = new HashMap<String, Object>();
		User exist = getUserByUserName(user.getUsername());
		if(exist==null){
			map.put("flag", false);
			map.put("msg", "该用户不存在！");
		}else{
			String oldPassword = exist.getPassword(); // 原密码
			String oldRadomKey = exist.getRemark(); // 原来的随机窜
			Boolean result = PasswordUtil.isPasswordCorrect(oldPassword, user.getPassword(), oldRadomKey);
			if(result){
				map.put("flag", true);
				map.put("msg", "登录成功！");
			}else{
				map.put("flag", false);
				map.put("msg", "密码输入错误");
			}
		}
		
		return map;
	}
	
	public Map<String, Object> updatePassword(String username,String password,String newPwd){
		Map<String, Object> map = new HashMap<String, Object>();
		User exist = getUserByUserName(username);
		String oldRadomKey = exist.getRemark(); // 原来的随机窜
		Boolean result = PasswordUtil.isPasswordCorrect(exist.getPassword(), password, oldRadomKey);
		if(!result){
			map.put("flag", false);
			map.put("msg", "密码输入错误");
		}else{
			String newPassword = PasswordUtil.getEncyptedOperPassword(newPwd, oldRadomKey);
			if(exist.set("password", newPassword).update()){
				map.put("flag", true);
			}else{
				map.put("flag", false);
				map.put("msg", "修改密码失败");
			}
		}
		return map;
	}

	
	/**
	 * 获得登录用户
	 * @param user_name
	 * @return
	 */
	public User getUserByUserName(String user_name){
		return dao.findFirst("select * from user where username=? and isdelete=1 and type=2", user_name);
	}
	
	public boolean deleteById(Object idValue){
		return dao.findById(idValue).set("isDelete", IS_DELETE_NO).update();
	}
	
}
