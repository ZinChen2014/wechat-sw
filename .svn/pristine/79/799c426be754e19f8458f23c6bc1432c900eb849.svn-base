package com.desksoft.wechat.common.plugin;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.log4j.Logger;
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

import com.desksoft.wechat.common.model.PayRecord;
/**
 * @author Joker
 * 水务集团的每日对账接口
 */
@Scheduled(fixedDelay=1000*10) // 每10秒
//@Scheduled(cron = "0 0 0 * * ?")  //每天凌晨执行前一天
public class DailyCheckJob implements Job {
	
	private static Logger log = Logger.getLogger(DailyCheckJob.class);
	
	@Override
	public void execute(JobExecutionContext arg0) throws JobExecutionException {
		
		//每次取10条,处理
		int maxID = 0; 
		List<PayRecord> list = PayRecord.dao.getPayRecordListById(maxID);
		if(list.size()>0){
			dealCheckPayRecord(maxID);
		}
	
		
		System.out.println("----------"+new Date()+"--------------------");
		System.out.println("老金又拖工资啦");
		System.out.println("----------"+new Date()+"--------------------");

	}
	
	
	/**
	 * 处理一个批次10个支付记录
	 * 循环
	 * @param maxID  
	 * @return flag maxID  Map<String,Object>
	 */
	private void dealCheckPayRecord(int maxID){
		Map<String,Object> map = new HashMap<String,Object>();
		List<PayRecord> list = PayRecord.dao.getPayRecordListById(maxID);
		if(list.size()<=0){
			//map.put("flag", false);
			log.info("当日所有账单对账完毕"+System.currentTimeMillis());
			return;
		}
		//处理一个批次10个支付记录
		try {
			for(PayRecord payRecord:list){
				//对账
				if(checking(payRecord)){
				//对账完成
					payRecord.dao.set("isChk", 1);
				}else{
				//对账失败
					log.debug("payRecord id="+payRecord.getId()+",对账失败");
				}
			}
			log.info("成功处理10个"+System.currentTimeMillis());
		} catch (Exception e) {
			e.printStackTrace();
			if(list.size()>0){
				log.debug(System.currentTimeMillis()+"出现异常，最小id是："+list.get(0).getId());
			}else{
				log.debug(System.currentTimeMillis()+"出现异常");
			}
			
		}
		
		if(list.size()==10){
			 PayRecord pr = list.get(list.size()-1);
			 
			 if(null!=pr && null!=pr.getId() && pr.getId()>0){
				 
				 log.debug("maxID:"+pr.getId());
				 
				 //循环
				 dealCheckPayRecord(pr.getId());
			 }
		}
	}
	
	/**
	 * 调用对账接口
	 * @param payRecord
	 * @return
	 */
	public boolean checking(PayRecord payRecord){
		boolean flag = false;
		//
		
		
		return flag;
	}
	
}
